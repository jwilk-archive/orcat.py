#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2020 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import contextlib
import functools
import itertools
import operator
import sys

buffer_size = 1 << 20

def apply_or(items):
    result = bytearray()
    append = result.append
    for bs in itertools.zip_longest(*items, fillvalue=0):
        append(functools.reduce(operator.__or__, bs))
    return result

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('paths', metavar='PATH', nargs='+')
    options = ap.parse_args()
    with contextlib.ExitStack() as xstack:
        files = [
            xstack.enter_context(open(path, 'rb'))
            for path in options.paths
        ]
        eofs = [False for file in files]
        while True:
            buffers = []
            for i, file in enumerate(files):
                if eofs[i]:
                    buffer = ''
                else:
                    buffer = file.read(buffer_size)
                    if len(buffer) < buffer_size:
                        eofs[i] = True
                buffers += [buffer]
            if any(buffers):
                sys.stdout.buffer.write(apply_or(buffers))
            else:
                break

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
